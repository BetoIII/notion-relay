#!/usr/bin/env node

/**
 * Interactive Setup Script
 * Guides users through initial configuration
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('üöÄ Welcome to Notion Relay Worker Setup!\n');
console.log('This script will help you configure your worker for deployment.\n');

async function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setup() {
    try {
        // Check if .env already exists
        const envPath = path.join(process.cwd(), '.env');
        if (fs.existsSync(envPath)) {
            const overwrite = await question('‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                console.log('Setup cancelled. You can manually edit .env or run this script again.');
                rl.close();
                return;
            }
        }

        console.log('\nüìù Let\'s configure your Notion integration...\n');
        
        // Get Notion token
        console.log('1Ô∏è‚É£  Notion Integration Token');
        console.log('   ‚Ä¢ Go to: https://www.notion.so/my-integrations');
        console.log('   ‚Ä¢ Click "New integration"');
        console.log('   ‚Ä¢ Give it a name and select your workspace');
        console.log('   ‚Ä¢ Copy the "Internal Integration Token"\n');
        
        const notionToken = await question('Enter your Notion Integration Token: ');
        
        if (!notionToken || notionToken.trim() === '') {
            console.log('‚ùå Notion token is required. Please run setup again.');
            rl.close();
            return;
        }

        // Get database ID
        console.log('\n2Ô∏è‚É£  Notion Database ID');
        console.log('   ‚Ä¢ Create a new database in Notion (or use existing)');
        console.log('   ‚Ä¢ Share the database with your integration');
        console.log('   ‚Ä¢ Copy the database ID from the URL');
        console.log('   ‚Ä¢ Example URL: https://notion.so/myworkspace/DATABASE_ID?v=...\n');
        
        const databaseId = await question('Enter your Notion Database ID: ');
        
        if (!databaseId || databaseId.trim() === '') {
            console.log('‚ùå Database ID is required. Please run setup again.');
            rl.close();
            return;
        }

        // Get worker name
        console.log('\n3Ô∏è‚É£  Worker Configuration');
        const defaultName = 'my-notion-relay';
        const workerName = await question(`Enter worker name (${defaultName}): `) || defaultName;

        // Create .env file
        const envContent = `# Notion Relay Worker Configuration
# Generated by setup script on ${new Date().toISOString()}

NOTION_TOKEN=${notionToken.trim()}
NOTION_DB_ID=${databaseId.trim()}

# Optional: Uncomment and configure as needed
# MAX_PAYLOAD_SIZE=1048576
# ENABLE_CORS=true
# API_KEY=your_optional_api_key_for_authentication
`;

        fs.writeFileSync(envPath, envContent);
        console.log('\n‚úÖ .env file created successfully!');

        // Update wrangler.jsonc
        const wranglerPath = path.join(process.cwd(), 'wrangler.jsonc');
        try {
            const wranglerContent = fs.readFileSync(wranglerPath, 'utf8');
            const updatedContent = wranglerContent.replace(
                '"name": "notion-relay"',
                `"name": "${workerName}"`
            );
            fs.writeFileSync(wranglerPath, updatedContent);
            console.log('‚úÖ wrangler.jsonc updated with your worker name!');
        } catch (error) {
            console.log('‚ö†Ô∏è  Could not update wrangler.jsonc automatically. Please update the name field manually.');
        }

        // Show next steps
        console.log('\nüéâ Setup complete! Next steps:');
        console.log('\nüìã Validation:');
        console.log('   npm run validate');
        console.log('\nüß™ Testing:');
        console.log('   npm run test');
        console.log('   npm run dev  # Test locally');
        console.log('\nüöÄ Deployment:');
        console.log('   npm run deploy');
        console.log('\nüìö Documentation:');
        console.log('   ‚Ä¢ README.md - Full documentation');
        console.log('   ‚Ä¢ test/individual-tests.md - API examples');
        
        console.log('\nüîí Security Note:');
        console.log('   Your .env file contains sensitive information.');
        console.log('   Make sure it\'s in .gitignore and never commit it!');

    } catch (error) {
        console.error('\n‚ùå Setup failed:', error.message);
    }
    
    rl.close();
}

setup(); 